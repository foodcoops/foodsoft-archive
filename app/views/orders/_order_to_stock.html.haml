- content_for :head do
  = javascript_include_tag 'order_to_stock'

%table
  %tr
    %th Name
    %th Netto-/Bruttopreis
    %th Einheit
    %th Bestellte Einheiten
    %th Volle Gebinde
    %th Nicht-volles Gebinde
    %th Mengen ins Lager
  - total_net, total_gross, counter = 0, 0, 0
  - order.articles_grouped_by_category.each do |category_name, order_articles|
    %tr{:style => "background-color:#EFEFEF"}
      %td{:style => "text-align:left; color: grey;"}=h category_name
      %td{:colspan => "9"}
    - order_articles.each do |order_article|
      - net_price = order_article.price.price
      - gross_price = order_article.price.gross_price
      - units = order_article.units_to_order
      - unit_quantity = order_article.price.unit_quantity
      - total_net += units * unit_quantity * net_price
      - total_gross += units * unit_quantity * gross_price
      - rest = order_article.quantity % unit_quantity
      :javascript
        addData(#{order_article.id}, #{gross_price}, #{unit_quantity}, #{order_article.quantity}, #{order_article.tolerance}, 0)

      %tr{:class => cycle('even', 'odd', :name => 'articles'), :style => "color: #{rest == 0 ? 'green' : 'red'}"}[order_article]
        %td=h order_article.article.name
        %td 
          #{number_to_currency(net_price)} / #{number_to_currency(gross_price)}
        %td
          #{order_article.article.unit}
        %td
          %span{:id => "tq_#{order_article.id}"}= order_article.quantity
          +
          #{order_article.tolerance}
        %td
          %span{:id => "units_#{order_article.id}"}= units
        %td
          %span{:id => "luq_#{order_article.id}"}= rest
          \/ #{unit_quantity}
        %td
          %span{:id => "qts_#{order_article.id}"} 0
          %input{:type => "hidden", :id => "q_#{order_article.id}", :name => "to_stock[#{order_article.id}]", :value => "0", :size => "2"}
          = button_to_function('+', "increaseQuantity(#{order_article.id})")
          = button_to_function('-', "decreaseQuantity(#{order_article.id})")
%p
  Summe (Netto/Brutto-Preise):
  = "#{number_to_currency(total_net)} / #{number_to_currency(total_gross)}"
%p
  Bestellte Artikel.
  = order.order_articles.ordered.count
